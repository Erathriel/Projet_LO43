@startuml

Package  "Modele" <<Frame>> #A4A4A4 {
    class PartieModele {
    - tourActuel : int
    - pileCarte : PileCarteModele
    - plateau : PlateauModele
    - joueurEnAction : ProfModele
    + creationPersoObjM() : void
    + getPileCarte() : PileCarteModele
    + getPlateau() : PlateauModele
    + getJoueurEnAction() : ProfModele
    + setJoueurEnAction(ProfModele joueurEnAction) : void
    }
    class PlateauModele {
    - nbTuile : int
    }
    class TuileModele {
    - nbCase : int
    - id : int
    - tuileAccessible : Tuile []
    + tuileContainProf() : boolean
    + tuileContainEtu() : boolean
    + rangementEtudiants() : void
    + porteSurTuile() : void
    + setPersOnTuile() : void
    + getId() : int
    + setId() : int
    + getTuileAccessible() : TuileModele []
    + setTuileAccessible() : void
    + getPorteFermer() : ArrayList<CaseModele>
    }
    class CaseModele {
    - maTuileModele : Tuile
    - passable : boolean
    - coordX : int
    - coordY : int
    + containDoorLocked() : boolean
    + nombreEtu() : int
    + getPassable() : boolean
    + setPassable(boolean passable)
    + getCoordX() : int
    + getCoordY() : int
    + setCoordX(int coordX)
    + setCoordY(int coordY)
    + getMaTuile() : TuileModele
    + setMaTuile(TuileModele maTuile) : void
    }
    abstract class ElemCaseModele {
    - image : Image
    - MaCase : CaseModele
    + getImage() : Image
    + setImage(Image image) : void
    + getMaCase() : CaseModele
    + setMaCase(CaseModele maCase) : void
    }
    class MurModele{}
    class PorteModele {
    - verrouiller : boolean
    + isVerrouiller() : boolean
    + setVerrouiller() : void
    }
    class ObjectifModele {
    - activer : boolean
    - expRapporte : int
    + setActiver() : void
    + isActiver() : boolean
    + getExpRapporte() : int
    }
    class MachineCafeModele {
    + spawnDebutManche(PileCarteModele pile,int exptot)
    }
    abstract class PersonnageModele {
    - nbPa : int
    - pv : int
    - pa :int
    - nom : String
    - jouable : boolean
    + getPv() : int
    + setPv(int pv) : void
    + getPa() : int
    + setPa(int pa) : void
    + getNom() : String
    + setNom(String nom) : void
    + getJouable() : boolean
    + setJouable(boolean jouable) : void
    + getNbPa()
    + tourDeJeu()
    'Attaque'
    + deplacement() : void
    + reinitPa () : void
    + passer() : void
    + isValider() : boolean
    + setJouable(boolean jouable) : void
    }
    class ProfModele {
     - exp : int
     - inventaire : InventaireModele
     - info : BufferedImage
     + choixOutilEtZone() : void
     + valider(ArrayList<PersonnageModele> per,int indexObjet) : void
     + fouiller(PileCarteModele p) : void
     + choixPorte() : void
     + ouvriPorte(PorteModele porte) : boolean
     + choixModifInventaire() : void
     + modifInventaire(int indexDÃ©part,int indexArriv) : void
     + activerObjectif() : void
     + deplacement() : void
     + capaciteActive() : void
     + capacitePassive() : void
     + getExp() : int
     + setExp(int exp) : void
     + getInventaire() : InventaireModele
     + setImage(BufferedImage img) : void
     + getInfo() : BufferedImage
    }
    class EtudiantModele {
    - nbDemandeValidation : int
    - typeUV : String []
    - expRapporte : int
    + valider(ArrayList<PersonnageModele> per) : void
    + deplacement() : void
    + tourDeJeu() : void
    + getNbDemandeValidation() : int
    + setNbDemandeValidation(int nbDemandeValidation) : void
    + getTypeUV() : String[]
    + getExpRapporte() : int
    }
    interface SpecialiteModele {
        + capaciteActive() : void
        + capacitePassive() : void
    }
    class InventaireModele {
    - capacite : int
    - nbObjetActuel : int
    + getContenuInventaire() : ArrayList<ObjetModele>
    + suppressionObjet(int index) : void
    }
    class ObjetModele {
    - nom : String
    - emplacement : int
    + getNom() : String
    }
    class CleModele{}
    class OutilValidationModele {
    - portee : int
    - nbUVVal : int
    - nbActivation : int
    - nbTentative : int
    - tauxDeReussite : int
    - typeUV : String []
    + getModifier() : boolean
    + setModifier() : void
    + getNbActivation() : int
    + setNbActivation(int nbActivation) : void
    + getNbTentative() : int
    + setNbActivation(int nbTentative) : void
    + getPortee() : int
    + setPortee(int portee) : void
    + getNbUVVal() : int
    + getTypeUV() : String[]
    + getTauxDeReussite() : int
    + setTauxDeReussite(int taux) : void
    }
    abstract class CarteModele {
    - Intitule : String
    - img : BufferedImage
    - imgI : ImageIcon
    + getIntitule() : String
    + getImg() : BufferedImage
    + getImgIcon() : ImageIcon
    }
    class CarteEtudianteModele {
    - malchance : int
    + apparition(CaseModele c,int exp) : void
    }
    class PileCarteModele {
    - nbCarte : int
    - listeCarte : ArrayList<CarteModele>
    + remplissage() : void
    + getNbCarte() : int
    + setNbCarte(int nbCarte)
    + getListeCarte() : ArrayList<CarteModele>
    + setListeCarte() : void
    }
    class ProfPhysiqueModele{
    + capaciteActive() : void
    + capacitePassive() : void
    }
    class ProfHumaModele{
    + capaciteActive() : void
    + capacitePassive() : void
    }
    class ProfMathModele {
    + capaciteActive() : void
    + capacitePassive() : void
    }
    class ProfInfoModele{
    + capaciteActive() : void
    + capacitePassive() : void
    }
    class SolModele{

    }
    class SortieModele{

    }
}
'Relation
Plateau "1" *-- "1-*" Tuile
Tuile "1" *-- "1-*" Case
Case "1" o-- "0-*" ElemCase
ElemCase <|-- Mur
ElemCase <|-- Objectif
ElemCase <|-- MachineCafe
ElemCase <|-- Personnage
Tuile "1" o-- "0-*" Personnage
Mur <|-- Porte
Personnage <|-- Etudiant
Personnage <|-- Prof
Prof "1" -- "1" Inventaire
ProfPhysique --|> Prof
ProfHuma --|> Prof
ProfInfo --|> Prof
ProfMath --|> Prof
Prof ..|> Specialite
Inventaire o-- Objet
Objet <|-- Cle
Objet <|-- OutilValidation
Carte <|-- Objet
Carte <|-- CarteEtudiante
PileCarte "1" *-- "0-*" Carte
Sol --|> ElemCase
Sortie --|> ElemCase
@enduml